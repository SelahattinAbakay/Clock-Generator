// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="clock_generator,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.498000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=34,HLS_SYN_LUT=93,HLS_VERSION=2019_2}" *)

module clock_generator (
        ap_clk,
        ap_rst,
        out_clock
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
output   out_clock;

reg   [0:0] state;
reg   [31:0] counter;
wire   [0:0] select_ln21_fu_72_p3;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] select_ln33_fu_58_p3;
wire   [0:0] icmp_ln33_fu_46_p2;
wire   [31:0] next_counter_fu_52_p2;
wire   [0:0] xor_ln33_fu_66_p2;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 state = 1'd0;
#0 counter = 32'd9;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        counter <= select_ln33_fu_58_p3;
        state <= select_ln21_fu_72_p3;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign icmp_ln33_fu_46_p2 = ((counter == 32'd0) ? 1'b1 : 1'b0);

assign next_counter_fu_52_p2 = ($signed(counter) + $signed(32'd4294967295));

assign out_clock = state;

assign select_ln21_fu_72_p3 = ((state[0:0] === 1'b1) ? xor_ln33_fu_66_p2 : icmp_ln33_fu_46_p2);

assign select_ln33_fu_58_p3 = ((icmp_ln33_fu_46_p2[0:0] === 1'b1) ? 32'd9 : next_counter_fu_52_p2);

assign xor_ln33_fu_66_p2 = (icmp_ln33_fu_46_p2 ^ 1'd1);

endmodule //clock_generator
